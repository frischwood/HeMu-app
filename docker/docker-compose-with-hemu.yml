version: '3.8'

services:
  titiler:
    image: ghcr.io/developmentseed/titiler:latest
    platform: linux/amd64
    ports:
      - "8001:8000"
    volumes:
      - ../data/cogs:/opt/cogs:ro
    environment:
      - TITILER_API_PREFIX=${TITILER_API_PREFIX}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - CORS_METHODS=${CORS_METHODS}
      - CORS_HEADERS=${CORS_HEADERS}
    command: uvicorn titiler.application.main:app --host 0.0.0.0 --port 8000

  backend:
    build:
      context: ../app
    ports:
      - "8000:8000"
    volumes:
      - ../data:/app/data
    depends_on:
      - titiler
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATA_DIR=${DATA_DIR}
      - VARIABLE=${VARIABLE}
      - DATETIME_FORMAT=${DATETIME_FORMAT}

  frontend:
    image: nginx:alpine
    ports:
      - "3000:80"
    volumes:
      - ../frontend:/usr/share/nginx/html:ro
      - ../frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend

  # Original data ingestion (for existing NetCDF files)
  cron-ingest:
    build:
      context: ../app
    volumes:
      - ../data:/app/data
      - ../app:/app
    command: ["sh", "-c", "while true; do python /app/ingest.py; sleep 300; done"]
    depends_on:
      - backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - DATA_DIR=${DATA_DIR}
      - VARIABLE=${VARIABLE}
      - DATETIME_FORMAT=${DATETIME_FORMAT}

  # NEW: HeMu satellite data processing
  hemu-processor:
    build:
      context: ../HeMu
      dockerfile: Dockerfile.hemu
    volumes:
      - ../data:/app/data  # Share data with main app
      - ../HeMu:/app/HeMu   # HeMu source code
    command: ["sh", "-c", "while true; do python /app/HeMu/smart_hemu_processor.py; sleep 3600; done"]  # Run hourly
    depends_on:
      - backend
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - HEMU_DOMAIN=${HEMU_DOMAIN:-CH}
      - HEMU_LOOKBACK_HOURS=${HEMU_LOOKBACK_HOURS:-24}
      - EUMDAC_API_KEY=${EUMDAC_API_KEY}
      - EUMDAC_API_SECRET=${EUMDAC_API_SECRET}
    # Optional: Add GPU support if available
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: 1
    #           capabilities: [gpu]
